{"ast":null,"code":"var _jsxFileName = \"/Users/emilie/Programmation/Recipe_finder/recipe-finder/frontend/src/components/RecipePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchRecipesById } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ni;\nconst RecipePage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [recipe, setRecipe] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchRecipe = async () => {\n      try {\n        const recipeData = await fetchRecipesById(id);\n        setRecipe(recipeData);\n      } catch (err) {\n        setError('Failed to fetch recipe details.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchRecipe();\n  }, [id]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading recipe details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, this);\n  if (!recipe) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No recipe found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: recipe.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prep Time: \", recipe.prepTime, \" minutes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Ingredients: \", recipe.ingredients.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Instructions: \", recipe.instructions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(RecipePage, \"yZOUtzq0csOHqC95SBei6e72RcU=\", false, function () {\n  return [useParams];\n});\n_c = RecipePage;\nexport default RecipePage;\nvar _c;\n$RefreshReg$(_c, \"RecipePage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","fetchRecipesById","jsxDEV","_jsxDEV","i","RecipePage","_s","id","recipe","setRecipe","loading","setLoading","error","setError","fetchRecipe","recipeData","err","children","fileName","_jsxFileName","lineNumber","columnNumber","name","prepTime","ingredients","join","instructions","_c","$RefreshReg$"],"sources":["/Users/emilie/Programmation/Recipe_finder/recipe-finder/frontend/src/components/RecipePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchRecipesById } from '../services/api';\ni\n\nconst RecipePage = () => {\n  const { id } = useParams();\n  const [recipe, setRecipe] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchRecipe = async () => {\n      try {\n        const recipeData = await fetchRecipesById(id);\n        setRecipe(recipeData);\n      } catch (err) {\n        setError('Failed to fetch recipe details.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRecipe();\n  }, [id]);\n\n  if (loading) return <p>Loading recipe details...</p>;\n  if (error) return <p>{error}</p>;\n  if (!recipe) return <p>No recipe found.</p>;\n\n  return (\n    <div>\n      <h1>{recipe.name}</h1>\n      <p>Prep Time: {recipe.prepTime} minutes</p>\n      <p>Ingredients: {recipe.ingredients.join(', ')}</p>\n      <p>Instructions: {recipe.instructions}</p>\n    </div>\n  );\n};\n\nexport default RecipePage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,gBAAgB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnDC,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMd,gBAAgB,CAACM,EAAE,CAAC;QAC7CE,SAAS,CAACM,UAAU,CAAC;MACvB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZH,QAAQ,CAAC,iCAAiC,CAAC;MAC7C,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;EAER,IAAIG,OAAO,EAAE,oBAAOP,OAAA;IAAAc,QAAA,EAAG;EAAyB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACpD,IAAIT,KAAK,EAAE,oBAAOT,OAAA;IAAAc,QAAA,EAAIL;EAAK;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAChC,IAAI,CAACb,MAAM,EAAE,oBAAOL,OAAA;IAAAc,QAAA,EAAG;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE3C,oBACElB,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAKT,MAAM,CAACc;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACtBlB,OAAA;MAAAc,QAAA,GAAG,aAAW,EAACT,MAAM,CAACe,QAAQ,EAAC,UAAQ;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3ClB,OAAA;MAAAc,QAAA,GAAG,eAAa,EAACT,MAAM,CAACgB,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnDlB,OAAA;MAAAc,QAAA,GAAG,gBAAc,EAACT,MAAM,CAACkB,YAAY;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACf,EAAA,CAjCID,UAAU;EAAA,QACCL,SAAS;AAAA;AAAA2B,EAAA,GADpBtB,UAAU;AAmChB,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}