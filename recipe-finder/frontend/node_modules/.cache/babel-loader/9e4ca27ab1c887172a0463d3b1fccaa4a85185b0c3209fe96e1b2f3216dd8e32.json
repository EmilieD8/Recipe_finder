{"ast":null,"code":"const API_BASE = 'http://localhost:5000';\n\n// Fetch recipes by ingredients\nexport const fetchRecipesByIngredients = async ingredients => {\n  if (!ingredients.trim()) {\n    throw new Error(\"Ingredients query cannot be empty\");\n  }\n  try {\n    const response = await fetch(`${API_BASE}/recipes?ingredients=${ingredients}`);\n    if (!response.ok) {\n      throw new Error(`Error fetching recipes: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error in fetchRecipesByIngredients:\", error);\n    throw error;\n  }\n};\n\n// Fetch recipe by ID\nexport const fetchRecipesById = async id => {\n  if (!id) {\n    throw new Error(\"Recipe ID is required\");\n  }\n  try {\n    const response = await fetch(`${API_BASE}/recipes/${id}`);\n    if (!response.ok) {\n      throw new Error(`Error fetching recipe: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error in fetchRecipesById:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE","fetchRecipesByIngredients","ingredients","trim","Error","response","fetch","ok","statusText","data","json","error","console","fetchRecipesById","id"],"sources":["/Users/emilie/Programmation/Recipe_finder/recipe-finder/frontend/src/services/api.tsx"],"sourcesContent":["import { Recipe } from '../types.tsx';\n\nconst API_BASE = 'http://localhost:5000';\n\n// Fetch recipes by ingredients\nexport const fetchRecipesByIngredients = async (ingredients: string): Promise<Recipe[]> => {\n  if (!ingredients.trim()) {\n    throw new Error(\"Ingredients query cannot be empty\");\n  }\n  \n  try {\n    const response = await fetch(`${API_BASE}/recipes?ingredients=${ingredients}`);\n\n    if (!response.ok) {\n      throw new Error(`Error fetching recipes: ${response.statusText}`);\n    }\n\n    const data: Recipe[] = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error in fetchRecipesByIngredients:\", error);\n    throw error;\n  }\n};\n\n// Fetch recipe by ID\nexport const fetchRecipesById = async (id: string): Promise<Recipe> => {\n  if (!id) {\n    throw new Error(\"Recipe ID is required\");\n  }\n\n  try {\n    const response = await fetch(`${API_BASE}/recipes/${id}`);\n\n    if (!response.ok) {\n      throw new Error(`Error fetching recipe: ${response.statusText}`);\n    }\n\n    const data: Recipe = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error in fetchRecipesById:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAEA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA,OAAO,MAAMC,yBAAyB,GAAG,MAAOC,WAAmB,IAAwB;EACzF,IAAI,CAACA,WAAW,CAACC,IAAI,CAAC,CAAC,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EACtD;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,wBAAwBE,WAAW,EAAE,CAAC;IAE9E,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIH,KAAK,CAAC,2BAA2BC,QAAQ,CAACG,UAAU,EAAE,CAAC;IACnE;IAEA,MAAMC,IAAc,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC5C,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAOC,EAAU,IAAsB;EACrE,IAAI,CAACA,EAAE,EAAE;IACP,MAAM,IAAIV,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,YAAYc,EAAE,EAAE,CAAC;IAEzD,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIH,KAAK,CAAC,0BAA0BC,QAAQ,CAACG,UAAU,EAAE,CAAC;IAClE;IAEA,MAAMC,IAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC1C,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}